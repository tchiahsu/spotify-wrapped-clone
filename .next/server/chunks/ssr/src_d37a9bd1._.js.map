{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/tonyhsu/Desktop/projects/spotify-wrapped/src/lib/spotify.tsx"],"sourcesContent":["/**\n * It loads the verifier from local storage and using both the code returned from the callback and the\n * verifier to perfrom a POST to the Spotify token API. The API uses two values to verify the request and\n * it returns an access token.\n */\nexport async function getAccessToken(clientId: string, code: string, verifier: string): Promise<string> {\n    // const redirectUri = `https://tchiahsu.github.io/spotify-wrapped-clone/callback`;\n    const redirectUri = `http://127.0.0.1:3000/callback`;\n\n    if (!verifier) {\n        throw new Error(\"Missing Verifier\")\n    }\n\n    const params = new URLSearchParams();\n    params.append(\"client_id\", clientId);\n    params.append(\"grant_type\", \"authorization_code\");\n    params.append(\"code\", code);\n    params.append(\"redirect_uri\", redirectUri);\n    params.append(\"code_verifier\", verifier!);\n\n    const result = await fetch(\"https://accounts.spotify.com/api/token\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n        body: params\n    });\n\n    const { access_token } = await result.json();\n\n    return access_token;\n}\n\n/**\n * Fetch User Top 5 Artists\n */\nexport async function fetchTopArtists(token: string) {\n    const result = await fetch(\"https://api.spotify.com/v1/me/top/artists?time_range=long_term&limit=5\", {\n        method: \"GET\",\n        headers: { Authorization: `Bearer ${token}` },\n    });\n\n    if (!result.ok) {\n        throw new Error(`Spotify API error: ${result.status} ${result.statusText}`)\n    }\n\n    return await result.json()\n}\n\n/**\n * Fetch User Top 50 Tracks\n */\nexport async function fetchTopTracks(token: string) {\n    const result = await fetch(\"https://api.spotify.com/v1/me/top/tracks?time_range=long_term&limit=50\", {\n        method: \"GET\",\n        headers: { Authorization: `Bearer ${token}` }\n    });\n\n    if (!result.ok) {\n        throw new Error(`Spotify API error: ${result.status} ${result.statusText}`)\n    }\n\n    return await result.json()\n}\n\n/**\n * Batch artists for unique IDs\n */\nexport async function getUniqueArtists(token: string, artistsId: string[]) {\n    const batchIds = artistsId.join(\",\");\n    console.log(batchIds)\n    const result = await fetch(`https://api.spotify.com/v1/artists?ids=${batchIds}`, {\n        headers: { Authorization: `Bearer ${token}` }\n    });\n\n    if (!result.ok) {\n        throw new Error(`Failed to fetch artists: ${result.statusText}`)\n    }\n\n    return await result.json()\n}\n\n/**\n * Create Top 50 song playlist\n */\nexport async function createPlaylist(token: string, userId: string) {\n    const body = {\n        name: \"My Wrapped â€¢ Top 50\",\n        description: \"Your Top 50 Tracks from Spotify long term data\",\n        public: false\n    }\n\n    const result = await fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        method: \"POST\",\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": `application/json` },\n        body: JSON.stringify(body)\n    })\n\n    if (!result.ok) {\n        throw new Error(`Failed to create playlist: ${result.statusText}`)\n    }\n\n    return await result.json();\n}\n\n/**\n * Add Tracks to Playlist\n */\nexport async function addTrackToPlaylist(token: string, playlistId: string, trackUris: string[]) {\n    const result = await fetch(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {\n        method: \"POST\",\n        headers: { Authorization: `Bearer ${token}`, \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ uris: trackUris})\n    })\n\n    if (!result.ok) {\n        throw new Error(`Failed to add tracks: ${result.statusText}`);\n    }\n\n    return result.json();\n}\n\n/**\n * A call is made using the browser's Fetch API to get the profile data.\n * The authorization header, is set to Bearer TOKEN, where token is the access token\n * that we get from the spotify endpoint\n */\nexport async function fetchProfile(token: string) {\n    const result = await fetch(\"https://api.spotify.com/v1/me\", {\n        method: \"GET\", headers: { Authorization: `Bearer ${token}` }\n    });\n\n    return await result.json();\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///Users/tonyhsu/Desktop/projects/spotify-wrapped/src/lib/util.tsx"],"sourcesContent":["// Convert text to title case\nexport const toTitleCase = (name: string | undefined) => {\n    if (!name) return;\n    return name\n        .toLowerCase()\n        .split(/\\s+/) // split on one or more spaces\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(\" \");\n}"],"names":[],"mappings":"AAAA,6BAA6B;;;;;AACtB,MAAM,cAAc,CAAC;IACxB,IAAI,CAAC,MAAM;IACX,OAAO,KACF,WAAW,GACX,KAAK,CAAC,OAAO,8BAA8B;KAC3C,GAAG,CAAC,CAAA,OAAQ,KAAK,MAAM,CAAC,GAAG,WAAW,KAAK,KAAK,KAAK,CAAC,IACtD,IAAI,CAAC;AACd","debugId":null}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/tonyhsu/Desktop/projects/spotify-wrapped/src/lib/fetch.tsx"],"sourcesContent":["import { addTrackToPlaylist, createPlaylist, fetchProfile, fetchTopTracks } from \"./spotify\";\nimport { Track } from \"types/dataTypes\";\n\n/**\n * Create a playlist with the user's top 50 tracks\n */\nexport async function createTop50Playlist(token: string): Promise<string> {\n    try {\n        // 1. Get user profile to get the user ID\n        const profile = await fetchProfile(token);\n        const userId = profile.id;\n        \n        console.log(`Creating playlist for user: ${userId}`);\n        \n        // 2. Fetch top 50 tracks\n        const topTracksData = await fetchTopTracks(token);\n        const tracks = topTracksData.items;\n        \n        if (!tracks || tracks.length === 0) {\n            throw new Error(\"No top tracks found\");\n        }\n        \n        console.log(`Found ${tracks.length} top tracks`);\n        \n        // 3. Create the playlist\n        const playlist = await createPlaylist(token, userId);\n        const playlistId = playlist.id;\n        \n        console.log(`Created playlist: ${playlist.name} (ID: ${playlistId})`);\n        \n        // 4. Extract track URIs\n        const trackUris = tracks.map((track: Track) => track.uri);\n        \n        // 5. Add tracks to the playlist\n        // Spotify allows up to 100 tracks per request, so 50 is fine\n        await addTrackToPlaylist(token, playlistId, trackUris);\n        \n        console.log(`Added ${trackUris.length} tracks to playlist`);\n        \n        return playlistId;\n        \n    } catch (error) {\n        console.error(\"Error creating top 50 playlist:\", error);\n        throw error;\n    }\n}"],"names":[],"mappings":";;;;AAAA;;AAMO,eAAe,oBAAoB,KAAa;IACnD,IAAI;QACA,yCAAyC;QACzC,MAAM,UAAU,MAAM,IAAA,sIAAY,EAAC;QACnC,MAAM,SAAS,QAAQ,EAAE;QAEzB,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,QAAQ;QAEnD,yBAAyB;QACzB,MAAM,gBAAgB,MAAM,IAAA,wIAAc,EAAC;QAC3C,MAAM,SAAS,cAAc,KAAK;QAElC,IAAI,CAAC,UAAU,OAAO,MAAM,KAAK,GAAG;YAChC,MAAM,IAAI,MAAM;QACpB;QAEA,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,OAAO,MAAM,CAAC,WAAW,CAAC;QAE/C,yBAAyB;QACzB,MAAM,WAAW,MAAM,IAAA,wIAAc,EAAC,OAAO;QAC7C,MAAM,aAAa,SAAS,EAAE;QAE9B,QAAQ,GAAG,CAAC,CAAC,kBAAkB,EAAE,SAAS,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEpE,wBAAwB;QACxB,MAAM,YAAY,OAAO,GAAG,CAAC,CAAC,QAAiB,MAAM,GAAG;QAExD,gCAAgC;QAChC,6DAA6D;QAC7D,MAAM,IAAA,4IAAkB,EAAC,OAAO,YAAY;QAE5C,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,UAAU,MAAM,CAAC,mBAAmB,CAAC;QAE1D,OAAO;IAEX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,MAAM;IACV;AACJ","debugId":null}},
    {"offset": {"line": 184, "column": 0}, "map": {"version":3,"sources":["file:///Users/tonyhsu/Desktop/projects/spotify-wrapped/src/components/Tag.tsx"],"sourcesContent":["import React from \"react\";\n\ntype TagProps = {\n    children: React.ReactNode;\n};\n\nconst Tag = ({ children }: TagProps) => {\n    return (\n        <div\n            className=\"w-1/6 min-w-[14em] max-w-[15em] px-6 py-3 rounded-full font-bold text-[#1db954] text-center justify-center items-center\"\n        >\n            {children}\n        </div>\n    )\n}\n\nexport default Tag;"],"names":[],"mappings":";;;;;;AAMA,MAAM,MAAM,CAAC,EAAE,QAAQ,EAAY;IAC/B,qBACI,8OAAC;QACG,WAAU;kBAET;;;;;;AAGb;uCAEe","debugId":null}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":["file:///Users/tonyhsu/Desktop/projects/spotify-wrapped/src/components/Button.tsx"],"sourcesContent":["import React from \"react\";\n\ntype ButtonProps = {\n    children: React.ReactNode;\n    onClick?: () => void;\n};\n\nconst Button = ({ children, onClick }: ButtonProps) => {\n    return (\n        <button\n            onClick={onClick}\n            className=\"bg-[#1db954] w-1/6 min-w-[14em] max-w-[15em] px-6 py-3 rounded-full font-bold text-black hover:bg-[#1ed760] hover:scale-105 transition-opacity duration-75 active:scale-100 active:bg-[#1db954] active:opacity-95\"\n        >\n            {children}\n        </button>\n    )\n}\n\nexport default Button;"],"names":[],"mappings":";;;;;;AAOA,MAAM,SAAS,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAe;IAC9C,qBACI,8OAAC;QACG,SAAS;QACT,WAAU;kBAET;;;;;;AAGb;uCAEe","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["file:///Users/tonyhsu/Desktop/projects/spotify-wrapped/src/app/dashboard/page.tsx"],"sourcesContent":["\"use client\"\nimport { useEffect, useState } from \"react\";\nimport { useAuth } from \"context/AuthContext\";\nimport { fetchTopArtists, fetchTopTracks, getUniqueArtists } from \"lib/spotify\";\nimport { Artist, Track } from \"types/dataTypes\";\nimport { toTitleCase } from \"lib/util\";\nimport { BsDot } from \"react-icons/bs\";\nimport { IoMusicalNotesSharp } from \"react-icons/io5\";\nimport { createTop50Playlist } from \"lib/fetch\";\nimport Image from \"next/image\"\nimport Tag from \"components/Tag\";\nimport Button from \"components/Button\"\n\nexport default function Wrapped() {\n  const { token } = useAuth();\n  const [topArtists, setTopArtists] = useState<Artist[]>([]);\n  const [topTracks, setTopTracks] = useState<Track[]>([]);\n  const [topGenres, setTopGenres] = useState<string[]>([]);\n  const [songPerGenre, setSongPerGenre] = useState<Record<string, Track[]>>({});\n  const [uniqueGenreCount, setUniqueGenreCount] = useState(0);\n  const [uniqueArtistCount, setUniqueArtistCount] = useState(0);\n  const [trackFreshness, setTrackFreshness] = useState(0);\n\n  async function handleCreatePlaylist() {\n    if (!token) return alert(\"No token found\");\n    \n    try {\n      const id = await createTop50Playlist(token);\n      alert(\"Playlist created!\");\n      window.open(`https://open.spotify.com/playlist/${id}`, '_blank');\n    } catch (error) {\n      alert(`Failed to create playlist: ${error}`);\n    }\n  }\n\n\n  useEffect(() => {\n    if (!token) return;\n    (async () => {\n      // Get Top Artists\n      const artistData = await fetchTopArtists(token)\n      const artists = artistData.items.map((artist: Artist) => ({\n        id: artist.id, name: artist.name, images: artist.images\n      }))\n      setTopArtists(artists)\n\n      // Get Top Tracks\n      const trackData = await fetchTopTracks(token)\n      const tracks = trackData.items.map((track: Track) => ({\n        id: track.id, name: track.name, uri: track.uri, album: track.album, artists: track.artists, images: track.album.images\n      }))\n      setTopTracks(tracks)\n\n      // Get Unique Artists\n      const artistId = tracks.map((track: Track) => track.artists[0].id)\n      const uniqueIdSet: Set<string> = new Set(artistId)\n      const uniqueIdArray = [...uniqueIdSet]\n      setUniqueArtistCount(uniqueIdArray.length)\n\n      // Get Top Genres\n      const uniqueArtist = await getUniqueArtists(token, uniqueIdArray)\n      const artistGenres = new Map<string, string[]>();\n      for (const artist of uniqueArtist.artists as Artist[]) {\n        artistGenres.set(artist.id, artist.genres ?? [])\n      }\n\n      const genreCount: Record<string, number> = {};\n      for (const track of tracks as Track[]) {\n        const genreSet = new Set<string>();\n        for (const artist of track.artists) {\n          const gs = artistGenres.get(artist.id) ?? [];\n          gs.forEach(genre => genreSet.add(genre));\n        }\n\n        genreSet.forEach(genre => {\n          genreCount[genre] = (genreCount[genre] ?? 0) + 1;\n        });\n      }\n\n      const top3Genres = Object.entries(genreCount).sort((a, b) => b[1] - a[1]).slice(0, 3).map(([g]) => g)\n      setTopGenres(top3Genres)\n\n      const perGenre: Record<string, Track[]> = {};\n      for (const g of top3Genres) {\n        const list = (tracks as Track[]).filter(t => {\n          const gset = new Set<string>();\n          for (const art of t.artists) {\n            const gs = artistGenres.get(art.id) ?? [];\n            gs.forEach(x => gset.add(x));\n          }\n          return gset.has(g);\n        }).slice(0, 5);\n\n        perGenre[g] = list;\n      }\n      setSongPerGenre(perGenre);\n\n      // Unique Genres Across Top 50\n      const allGenre: string[] = uniqueArtist.artists.flatMap(\n        (artist: Artist) => artist.genres\n      );\n      const uniqueGenres = [...new Set(allGenre)]\n      setUniqueGenreCount(uniqueGenres.length)\n\n      // Freshness Percentage Across Top 50\n      const cutoff = new Date();\n      cutoff.setMonth(cutoff.getMonth() - 24);\n      const fresh = tracks.filter((t: Track) => new Date(t.album.release_date) >= cutoff).length;\n      const pct = Math.round((fresh / tracks.length) * 1000) / 10\n      setTrackFreshness(pct)\n    })();\n  }, [token]);\n\n  return (\n    <main className=\"flex flex-col gap-5 justify-center items-center\">\n\n      {/* Page Title */}\n      <div className=\"flex flex-col gap-3 h-[50vh] justify-center items-center\">\n        <div className=\"text-6xl font-bold mt-3\">Spotify Wrapped Clone</div>\n        <div className=\"text-[#B3B3B3]\">A journey through your Top 50 songs over the last few months</div>\n        <Tag>Your Spotify Wrapped</Tag>\n      </div>\n\n      {/* Top Artists and Tracks */}\n      <div className=\"flex flex-col w-5xl\">\n        {/* Title and Subheading */}\n        <div className=\"text-3xl font-bold\">Your Top Artists and Tracks</div>\n        <div className=\"text-[#B3B3B3]\">The sound that defines you</div>\n        <div className=\"grid grid-cols-2 gap-7 my-10\">\n          {/* Top Artists */}\n          <div className=\"flex flex-col gap-5\">\n            {topArtists.map((artist: Artist, index: number) => (\n              <div key={artist.id} className=\"grid grid-cols-[32px_64px_1fr] gap-2 items-center bg-[#535353] rounded-lg p-2\">\n                <div className=\"flex justify-center items-center text-3xl font-extrabold\">{index + 1}</div>\n                <div className=\"w-[64px] h-[64px] overflow-hidden rounded-lg\">\n                  <Image src={artist.images[0].url} alt={artist.name} width={64} height={64}/>\n                </div>\n                <div className=\"text-lg font-bold mx-3\">{artist.name}</div>\n              </div>\n            ))}\n          </div>\n          {/* Top Tracks */}\n          <div className=\"flex flex-col gap-5 w-full\">\n            {topTracks.slice(0, 5).map((track: Track, index: number) => (\n              <div key={track.id} className=\"grid grid-cols-[32px_64px_1fr] gap-2 items-center bg-[#535353] rounded-lg p-2\">\n                <div className=\"flex justify-center items-center text-3xl font-extrabold\">{index + 1}</div>                \n                <div className=\"w-[64px] h-[64px] overflow-hidden rounded-lg\">\n                  <Image src={track.images[0].url} alt={track.name} width={64} height={64} />\n                </div>\n                <div className=\"grid grid-cols-1 mx-3\">\n                  <div className=\"text-lg font-bold text-nowrap overflow-hidden\">{track.name}</div>\n                    <div className=\"flex justify-start items-center text-xs text-nowrap overflow-hidden\">\n                      {track.artists[0].name}\n                      <BsDot />\n                      {track.album.name}\n                    </div>\n                </div> \n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Top 3 Genres and Top 5 Songs per Genre */}\n      <div className=\"flex flex-col w-5xl mt-10\">\n        {/* Title and Subheading */}\n        <div className=\"text-3xl font-bold\">Your Top 3 Genres</div>\n        <div className=\"text-[#B3B3B3]\">Your taste across genres</div>\n\n        {/* Top Genre Panels */}\n        <div className=\"grid grid-cols-3 my-10 gap-10\">\n\n          {topGenres.map((g) => {\n            const list = songPerGenre[g] ?? [];\n            return (\n              <div key={g} className=\"flex flex-col bg-[#535353] rounded-lg px-3 py-5\">\n                <div className=\"flex justify-center items-center text-center text-2xl font-bold m-3\">{toTitleCase(g)}</div>\n                <div className=\"grid grid-cols-1 gap-y-2\">\n                  {list.slice(0,3).map((t) => (\n                    <div key={t.id} className=\"flex flex-row items-center p-2\">\n                      <div className=\"w-[64px] h-[64px] overflow-hidden rounded-lg\">\n                        <Image src={t.images[0].url} alt={t.name} width={64} height={64} />\n                      </div>\n                      <div className=\"p-2 font-bold\">{toTitleCase(t.name)}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            );\n          })}\n  \n        </div>\n      </div>\n\n      {/* Your Top 50 Stats */}\n      <div className=\"flex flex-col w-5xl mt-10\">\n          <div className=\"text-3xl font-bold\">Your Top 50 Breakdown</div>\n          <div className=\"text-[#B3B3B3]\">A closer look at your top 50</div>\n\n          {/* Stats Panels */}\n          <div className=\"grid grid-cols-3 my-10 gap-10 justify-center items-center px-10\">\n            <div className=\"flex flex-col justify-center items-center bg-[#535353] rounded-lg py-8 gap-2\">\n              <div className=\"text-6xl font-extrabold\">{uniqueArtistCount}</div>\n              <div className=\"text-[#B3B3B3] text-sm\">Unique Artists</div>\n            </div>\n\n            <div className=\"flex flex-col justify-center items-center bg-[#535353] rounded-lg py-8 gap-2\">\n              <div className=\"text-6xl font-extrabold\">{uniqueGenreCount}</div>\n              <div className=\"text-[#B3B3B3] text-sm\">Unique Genres</div>\n            </div>\n\n            <div className=\"flex flex-col justify-center items-center bg-[#535353] rounded-lg py-8 gap-2\">\n              <div className=\"text-6xl font-extrabold\">{trackFreshness}</div>\n              <div className=\"text-[#B3B3B3] text-sm\">Newly Discovered Artists</div>\n            </div>\n          </div>\n      </div>\n\n      {/* Last 50 Songs */}\n      <div className=\"flex flex-col w-5xl my-10\">\n        <div className=\"text-3xl font-bold\">Your Moments Reel</div>\n        <div className=\"text-[#B3B3B3]\">A timeline of your last 50 plays</div>\n        <div className=\"grid grid-cols-10 gap-5 gap-y-5 justify-center items-center mt-10\">\n          {topTracks.map((track: Track) => (\n            <div key={track.id}>\n              <div className=\"relative w-[90px] h-[90px] overflow-hidden rounded-lg hover:scale-110\">\n                <Image src={track.album.images[0].url} alt={track.name} width={90} height={90} />\n                <div className=\"absolute inset-0 bg-black/70 flex items-center justify-center text-white text-xs font-bold p-1 text-center opacity-0 hover:opacity-100 transition-opacity\">\n                  {track.name}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Create Wrapped Playlist */}\n      <div className=\"flex flex-col w-5xl my-10 justify-center items-center\">\n        <div className=\"text-3xl font-bold\">Your Wrapped Mix</div>\n        <div className=\"text-[#B3B3B3]\">A curated playlist of your top tracks</div>\n        <div className=\"flex flex-col justify-center items-center my-10 border-1 rounded-lg w-full h-[60vh] gap-5\">\n          <div className=\"p-[3px] rounded-lg bg-gradient-to-r from-green-400 to-blue-500\">\n            <div className=\"flex items-center justify-center rounded-lg w-[25vh] h-[25vh] bg-[#121212]\">\n              <IoMusicalNotesSharp size={124} />\n            </div>\n          </div>\n          <div className=\"flex flex-col items-center\">\n            <div className=\"text-2xl font-bold\">Spotify Wrapped Mix</div>\n            <div className=\"flex flex-row items-center text-[#B3B3B3] text-sm\">\n              50 tracks <BsDot /> total minutes\n            </div>\n          </div>\n          <Button onClick={handleCreatePlaylist}>Create Playlist</Button>\n        </div>\n      </div>\n\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}